<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>haselkern</title>
    <link rel="self" type="application/atom+xml" href="https://haselkern.com/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://haselkern.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-12-22T00:00:00+00:00</updated>
    <id>https://haselkern.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Compiler Optimizations</title>
        <published>2024-12-22T00:00:00+00:00</published>
        <updated>2024-12-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2024-smart-compiler/"/>
        <id>https://haselkern.com/blog/2024-smart-compiler/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2024-smart-compiler/">&lt;p&gt;While solving this year&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;2024&#x2F;day&#x2F;22&quot;&gt;Advent of Code puzzle for day 22&lt;&#x2F;a&gt;, I had written this function (which is a minor spoiler for the puzzle):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;mix_prune&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;secret&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;MOD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;usize = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;16777216&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt; n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span&gt;MOD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt; n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span&gt;MOD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;2048&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(secret &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span&gt; n) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;% &lt;&#x2F;span&gt;&lt;span&gt;MOD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    secret
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Starting from a given number, called &lt;code&gt;secret&lt;&#x2F;code&gt;,
we do three &quot;mix&quot; and &quot;prune&quot; operations
to calculate a new number.&lt;&#x2F;p&gt;
&lt;p&gt;Mixing is the process of deriving a new number from the secret
and performing an XOR operation with the secret.
Pruning is a modulo operation that will make sure the secret does not grow too large.&lt;&#x2F;p&gt;
&lt;p&gt;I noticed that all constants that are involved here are a power of two:
&lt;code&gt;64=2^6&lt;&#x2F;code&gt;, &lt;code&gt;32=2^5&lt;&#x2F;code&gt;, &lt;code&gt;2048=2^11&lt;&#x2F;code&gt; and &lt;code&gt;16777216=2^24&lt;&#x2F;code&gt;.
This opens some room for optimization.
Instead of performing a multiplication or division by a power of two,
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Arithmetic_shift&quot;&gt;we can do a bit shift left or right&lt;&#x2F;a&gt;.
Just before obliterating the readability of my code
by replacing all operations with bit shifts,
I was able to stop myself and think about it a bit.
The code was fast enough and a runtime profile showed
that not much time was spent in this function.
Optimizing this function would not be time well spent.&lt;&#x2F;p&gt;
&lt;p&gt;However, I was still curious.
Do I even need to optimize it?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&quot;&gt;LLVM&lt;&#x2F;a&gt;, the compiler backend that &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&quot;&gt;Rust&lt;&#x2F;a&gt; uses to emit machine code, is a beast.
It does all sorts of interesting optimizations.
&lt;a href=&quot;https:&#x2F;&#x2F;kristerw.blogspot.com&#x2F;2019&#x2F;04&#x2F;how-llvm-optimizes-geometric-sums.html&quot;&gt;Scalar Evolution&lt;&#x2F;a&gt; is an impressive one,
where it can detect specific loops and transform them into constant time operations.&lt;&#x2F;p&gt;
&lt;p&gt;What does LLVM make of the function from above?
Let&#x27;s fire up &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&quot;&gt;Godbolt&lt;&#x2F;a&gt; (with &lt;code&gt;-C opt-level=3&lt;&#x2F;code&gt;)
and see what the optimized assembly looks like.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;mix_prune:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    ; let n = secret * 64;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    ; secret = (secret ^ n) % MOD;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span&gt;eax, edi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;shl     &lt;&#x2F;span&gt;&lt;span&gt;eax, 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xor     &lt;&#x2F;span&gt;&lt;span&gt;eax, edi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;and     &lt;&#x2F;span&gt;&lt;span&gt;eax, 16777215
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    ; let n = secret &#x2F; 32;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    ; secret = (secret ^ n) % MOD;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span&gt;ecx, eax
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;shr     &lt;&#x2F;span&gt;&lt;span&gt;ecx, 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xor     &lt;&#x2F;span&gt;&lt;span&gt;ecx, eax
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    ; let n = secret * 2048;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;    ; secret = (secret ^ n) % MOD;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span&gt;eax, ecx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;shl     &lt;&#x2F;span&gt;&lt;span&gt;eax, 11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;and     &lt;&#x2F;span&gt;&lt;span&gt;eax, 16775168
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xor     &lt;&#x2F;span&gt;&lt;span&gt;eax, ecx
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;ret
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The initial function had three blocks of mixing and pruning
which I separated by newlines here.
Each block has something interesting in it,
which we will now take a look at.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;first-block&quot;&gt;First Block&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;; let n = secret * 64;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;; secret = (secret ^ n) % MOD;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span&gt;eax, edi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;shl     &lt;&#x2F;span&gt;&lt;span&gt;eax, 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xor     &lt;&#x2F;span&gt;&lt;span&gt;eax, edi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;and     &lt;&#x2F;span&gt;&lt;span&gt;eax, 16777215
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first block moves our &lt;code&gt;secret&lt;&#x2F;code&gt;,
which I suppose is in &lt;code&gt;edi&lt;&#x2F;code&gt;,
into the working register &lt;code&gt;eax&lt;&#x2F;code&gt;.
It then shifts the bits left by six places,
which is equivalent to a multiplication by &lt;code&gt;2^6=64&lt;&#x2F;code&gt;,
as we discussed earlier.
So the compiler does this optimization for us!
That&#x27;s great, as we can keep our code nice and readable,
but still know that the compiler will bring us maximum performance.&lt;&#x2F;p&gt;
&lt;p&gt;The first block ends with an &lt;code&gt;and&lt;&#x2F;code&gt; instruction on &lt;code&gt;eax&lt;&#x2F;code&gt;
with 16777215 that is one lower than our modulus 16777216 from earlier.
This is a clever optimization when computing modulo with a power of two.
Calculating modulo &lt;code&gt;2^n&lt;&#x2F;code&gt; is equivalent to keeping the rightmost &lt;code&gt;n-1&lt;&#x2F;code&gt; bits,
discarding all higher bits.
To keep the rightmost &lt;code&gt;n-1&lt;&#x2F;code&gt; bits
we can use a bit mask with &lt;code&gt;n-1&lt;&#x2F;code&gt; ones,
which is &lt;code&gt;2^n-1&lt;&#x2F;code&gt;,
or one lower than the modulus.
Applying this bit mask to our working register with &lt;code&gt;and&lt;&#x2F;code&gt;
will perform the modulo operation
and end the first block.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;second-block&quot;&gt;Second Block&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;; let n = secret &#x2F; 32;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;; secret = (secret ^ n) % MOD;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span&gt;ecx, eax
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;shr     &lt;&#x2F;span&gt;&lt;span&gt;ecx, 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xor     &lt;&#x2F;span&gt;&lt;span&gt;ecx, eax
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since the first block wrote its result into &lt;code&gt;eax&lt;&#x2F;code&gt;,
the second block uses &lt;code&gt;ecx&lt;&#x2F;code&gt; as its working register.
Since &lt;code&gt;32=2^5&lt;&#x2F;code&gt; we can do a division with 32
by shifting the bits to the right five places.
This is similar to the multiplication from earlier.
The difference being that the bits are shifted right to perform division,
instead of left to perform multiplication.
Then the &quot;mixing&quot; happens with a &lt;code&gt;xor&lt;&#x2F;code&gt; instruction.&lt;&#x2F;p&gt;
&lt;p&gt;What about the modulo operation?
It is missing completely. Why?
&lt;code&gt;eax&lt;&#x2F;code&gt; from the first block is smaller than our modulus,
since we just calculated the modulo there.
By shifting the value 5 bits to the right,
it will only ever be smaller still.
XOR-ing these two values will never make them bigger than the modulus.
LLVM has noticed that taking the modulo of a value
that is strictly smaller than the modulus has no effect
and omitted the operation.
This optimization marks the end of the second block.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;third-block&quot;&gt;Third Block&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;; let n = secret * 2048;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;; secret = (secret ^ n) % MOD;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span&gt;eax, ecx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;shl     &lt;&#x2F;span&gt;&lt;span&gt;eax, 11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;and     &lt;&#x2F;span&gt;&lt;span&gt;eax, 16775168
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xor     &lt;&#x2F;span&gt;&lt;span&gt;eax, ecx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The third block looks similar to the first one, except for two things.
One, the order of &lt;code&gt;and&lt;&#x2F;code&gt; and &lt;code&gt;xor&lt;&#x2F;code&gt; is swapped.
Two, the value used for &lt;code&gt;and&lt;&#x2F;code&gt; is different.
Here are the last two instructions from the first block as a reminder:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;xor     &lt;&#x2F;span&gt;&lt;span&gt;eax, edi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;and     &lt;&#x2F;span&gt;&lt;span&gt;eax, 16777215
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I do not know why LLVM reordered the instructions here.
I think it would work fine if the &lt;code&gt;xor&lt;&#x2F;code&gt; and &lt;code&gt;and&lt;&#x2F;code&gt; instructions from the first block were used.
Nevertheless, the number 16775168 used as a bit mask can be explained
when put into context of being applied after the left shift.
The left shift by 11 bits guarantees that the rightmost 11 bits of &lt;code&gt;eax&lt;&#x2F;code&gt; are zero.
Since they are zero, we do not have to use a mask to set them to zero.
In our modulo trick from the first block, LLVM used 16777215.
When we set the lowest 11 bits in this number to zero,
we get 16775168.
It remains a mystery to me why LLVM reordered these instructions.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;compilers-are-smart&quot;&gt;Compilers Are Smart&lt;&#x2F;h1&gt;
&lt;p&gt;I think it is interesting to peek behind the curtains of the &quot;low level&quot; sometimes
and see what the computer is actually doing with the code you write.
It is very comforting to know that I do not have to put effort into
micro-optimizations.
I can write readable code and be reasonably sure that I get the fastest
possible machine code.
This is all thanks to a lot of smart people
who put a whole lot of effort into making sure that &lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;Passes.html&quot;&gt;LLVM knows how to optimize a lot of things&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>German Mac Keyboard Improvement</title>
        <published>2024-10-02T00:00:00+00:00</published>
        <updated>2024-10-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2024-mac-keyboard/"/>
        <id>https://haselkern.com/blog/2024-mac-keyboard/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2024-mac-keyboard/">&lt;p&gt;The desktop environment on Apple computers is application based.
When you press an app icon in the dock,
all windows for the selected app will be brought to the foreground.
By pressing &lt;kbd&gt;Command&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; you bring up the app switcher
(I don&#x27;t know if that is the official term for it)
that allows you to switch between your apps.
When you select an app in the app switcher,
all windows of this app will be brought to the foreground,
just like with the dock.&lt;&#x2F;p&gt;
&lt;p&gt;I only recently found out that there is a shortcut to switch between windows
of the current app as well: &lt;kbd&gt;Command&lt;&#x2F;kbd&gt;+&lt;kbd&gt;`&lt;&#x2F;kbd&gt; (grave accent).
This works great,
but I found it a bit weird to use
since the grave accent is just to the left of the backspace button
on the right side of the keyboard.
My right hand usually rests on the mouse,
leaving my left hand to stretch across the entire keyboard to press this shortcut,
which is &lt;em&gt;not&lt;&#x2F;em&gt; comfortable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-mac-keyboard&#x2F;keyboard-de.png&quot; alt=&quot;Sketched drawing of a keyboard demonstrating the positions of the Command, Tab and Grave key on a german keyboard layout.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Why did Apple curse me with this ergonomic nightmare?
What do they have to say to defend themselves?
&lt;a href=&quot;https:&#x2F;&#x2F;support.apple.com&#x2F;en-us&#x2F;102650#:~:text=Command%E2%80%93Grave%20accent&quot;&gt;On the Apple support website&lt;&#x2F;a&gt; they write:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Command–Grave accent (`): Switch between the windows of the app you&#x27;re using. (The character on the second key varies by keyboard. It&#x27;s generally the key above the Tab key and to the left of the number 1.)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Wait a minute, my keyboard does not fit this description.
Who was this description made for?
Alternating between app switching and window switching
just by moving a finger to the next key over is the dream
US keyboard layout users can enjoy by default.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-mac-keyboard&#x2F;keyboard-us.png&quot; alt=&quot;Sketched drawing of a keyboard demonstrating the positions of the Command, Tab and Grave key on a US keyboard layout.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can change this shortcut under &lt;em&gt;Settings → Keyboard → Shortcuts → Keyboard → Move focus to next window&lt;&#x2F;em&gt;.
I changed it to the key above the tab key,
which is &lt;kbd&gt;^&lt;&#x2F;kbd&gt; on my german keyboard layout.
Just by tweaking this shortcut
window management on Mac feels a &lt;em&gt;lot&lt;&#x2F;em&gt; more natural.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Explicit Interfaces In Go</title>
        <published>2024-08-04T00:00:00+00:00</published>
        <updated>2024-08-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2024-go-explicit-interface/"/>
        <id>https://haselkern.com/blog/2024-go-explicit-interface/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2024-go-explicit-interface/">&lt;p&gt;I have an issue with &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&quot;&gt;Go&lt;&#x2F;a&gt;:
Interfaces are implemented implicitly.&lt;&#x2F;p&gt;
&lt;p&gt;You implement an interface by implementing all methods of that interface.
However, you don&#x27;t mention that you are implementing it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Speaker interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Speak&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;string
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Cat struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Cat&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Speak&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;meow&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Announce&lt;&#x2F;span&gt;&lt;span&gt;(s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Speaker&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    fmt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;Behold, for it speaks: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Speak&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span&gt;Cat{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Announce&lt;&#x2F;span&gt;&lt;span&gt;(cat)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is fine and works as you would expect.
What happens if you don&#x27;t implement the interface correctly?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F;              ↓ Whoops, typo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Cat&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Speek&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{ … }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Trying to run this will result in a compiler error.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;prog.go:21:11:
&lt;&#x2F;span&gt;&lt;span&gt;cannot use cat (variable of type Cat) as Speaker value in argument to Announce:
&lt;&#x2F;span&gt;&lt;span&gt;Cat does not implement Speaker (missing method Speak)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The error is immediately noticeable and easy enough to fix.
However, this is only a tiny example.&lt;&#x2F;p&gt;
&lt;p&gt;In a bigger real-life application, &lt;code&gt;main&lt;&#x2F;code&gt;, &lt;code&gt;Announce&lt;&#x2F;code&gt;, &lt;code&gt;Cat&lt;&#x2F;code&gt;, and &lt;code&gt;Speaker&lt;&#x2F;code&gt;
would all be located in different files in different packages.
The compiler would still complain that the error is in &lt;code&gt;main&lt;&#x2F;code&gt;.
This is technically correct.
&lt;code&gt;main&lt;&#x2F;code&gt; wants to &lt;code&gt;Announce&lt;&#x2F;code&gt; a &lt;code&gt;Speaker&lt;&#x2F;code&gt;,
but &lt;code&gt;Cat&lt;&#x2F;code&gt; isn&#x27;t one.&lt;&#x2F;p&gt;
&lt;p&gt;However, the mistake happened much earlier.
I wrote &lt;code&gt;Cat&lt;&#x2F;code&gt; and wanted it to implement &lt;code&gt;Speaker&lt;&#x2F;code&gt;,
except I made a mistake.
The compiler should direct me towards fixing the method I implemented on &lt;code&gt;Cat&lt;&#x2F;code&gt;
and not tell me that I cannot use &lt;code&gt;Cat&lt;&#x2F;code&gt; in &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-solution&quot;&gt;The Solution&lt;&#x2F;h1&gt;
&lt;p&gt;Hidden away in a &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;doc&#x2F;faq#guarantee_satisfies_interface&quot;&gt;short paragraph in the Go FAQ&lt;&#x2F;a&gt;
lies the solution to this problem:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can ask the compiler to check that the type T implements the interface I
by attempting an assignment using the zero value for T:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var _ I = &lt;&#x2F;span&gt;&lt;span&gt;T{} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#616e88;&quot;&gt;&#x2F;&#x2F; Verify that T implements I.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Applied to the previous example it would look like this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;type Cat struct &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;var _ Speaker = &lt;&#x2F;span&gt;&lt;span&gt;Cat{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#81a1c1;&quot;&gt;Cat&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;Speek&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbcbb;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;{…}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In addition to the previous error message,
you now get another error.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;prog.go:11:17:
&lt;&#x2F;span&gt;&lt;span&gt;cannot use Cat{} (value of type Cat) as Speaker value in variable declaration:
&lt;&#x2F;span&gt;&lt;span&gt;Cat does not implement Speaker (missing method Speak)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The error points to the line &lt;code&gt;var _ Speaker = Cat{}&lt;&#x2F;code&gt;,
right next to the method I want to implement!
Brilliant.
This is especially useful with an IDE
that lets you quickly jump to compile errors.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of hunting through files trying to figure this out,
the Go compiler now tells me exactly where I need to fix my mistake.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;expressing-intent&quot;&gt;Expressing Intent&lt;&#x2F;h1&gt;
&lt;p&gt;Another bonus is that my intent is more clear.
I did not implement a &lt;code&gt;Speak&lt;&#x2F;code&gt; method &lt;em&gt;by accident&lt;&#x2F;em&gt;
and just so happened to fulfill the &lt;code&gt;Speaker&lt;&#x2F;code&gt; interface.
I did it deliberately.
&lt;code&gt;var _ Speaker = Cat{}&lt;&#x2F;code&gt; tells other programmers
(which always includes yourself in the future)
that I &lt;em&gt;want&lt;&#x2F;em&gt; &lt;code&gt;Cat&lt;&#x2F;code&gt; to implement &lt;code&gt;Speaker&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The syntax is a little weird, but you can get used to it.
However, I would prefer something like
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;keyword.impl.html&quot;&gt;&lt;code&gt;impl Speaker for Cat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
which would be easier to understand.&lt;&#x2F;p&gt;
&lt;p&gt;The next time you are implementing an interface &lt;code&gt;I&lt;&#x2F;code&gt; for your struct &lt;code&gt;T&lt;&#x2F;code&gt;,
consider making the implementation explicit by writing &lt;code&gt;var _ I = T{}&lt;&#x2F;code&gt;.
This clarifies your intent
and will make implementation errors easier to locate.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Reject Operator Precedence</title>
        <published>2024-07-14T00:00:00+00:00</published>
        <updated>2024-07-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2024-operator-precedence/"/>
        <id>https://haselkern.com/blog/2024-operator-precedence/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2024-operator-precedence/">&lt;p&gt;The precedence of operators defines the order
in which the operators in an expression are evaluated.
We know this from real life as &lt;code&gt;2 + 3 * 4 = 2 + (3 * 4) = 14&lt;&#x2F;code&gt;
which is not equal to &lt;code&gt;(2 + 3) * 4 = 20&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I added a parenthesis to emphasize the order of operations.&lt;&#x2F;p&gt;
&lt;p&gt;Programming languages have rules about operator precedence as well.
Each language defines its own operator precedence rules,
(e.g.:
&lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;c&#x2F;language&#x2F;operator_precedence&quot;&gt;C&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;ref&#x2F;spec#Operator_precedence&quot;&gt;Go&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;expressions.html#expression-precedence&quot;&gt;Rust&lt;&#x2F;a&gt;)
which is great because each language is unique and follows its own goals.
It&#x27;s also terrible because when you switch between languages
you never quite know what the exact rules are.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s look at an example to see why operator precedence can be confusing.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;x = 1 &amp;lt;&amp;lt; 2 * 3 + 4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is the value of x?
By applying the operator precedence rules for each language we can figure it out.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2e3440;color:#d8dee9;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; C
&lt;&#x2F;span&gt;&lt;span&gt;x = 1 &amp;lt;&amp;lt; ((2 * 3) + 4) = 1024
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Go
&lt;&#x2F;span&gt;&lt;span&gt;x = ((1 &amp;lt;&amp;lt; 2) * 3) + 4 = 16
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Rust
&lt;&#x2F;span&gt;&lt;span&gt;x = 1 &amp;lt;&amp;lt; ((2 * 3) + 4) = 1024
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I added a parenthesis to emphasize the order of operations.&lt;&#x2F;p&gt;
&lt;p&gt;All languages agree that multiplication should come before addition.
But Rust and C give bit-shifts lower precedence than addition,
while Go treats it the same as multiplication
and evaluates from left to right.&lt;&#x2F;p&gt;
&lt;p&gt;I find this confusing.
Sure, it is probably intuitive
what the order of operations in a simple expression &lt;code&gt;2 * 3 + 4&lt;&#x2F;code&gt; is.
But that is only because we have &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Order_of_operations#Mnemonics&quot;&gt;PEMDAS&lt;&#x2F;a&gt;
or a variation of it ingrained in our brains.
Keeping in mind rules about operator precedence makes a programming language more complex,
for readers, writers
and for those writing the parser for the programming language itself.&lt;&#x2F;p&gt;
&lt;p&gt;Why not get rid of the cases where operator precedence introduces ambiguity?
A compiler could reject &lt;code&gt;2 * 3 + 4&lt;&#x2F;code&gt; because it might not be clear to everybody
what the order of operations would be.
Only expressions like &lt;code&gt;(2 * 3) + 4&lt;&#x2F;code&gt; would be accepted.
This is more verbose, but it reduces any ambiguity.
A language doing this would save itself the trouble
of defining and implementing an operator precedence table.
It would be simpler to implement and understand.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Colorful Huegene Experiments</title>
        <published>2024-04-21T00:00:00+00:00</published>
        <updated>2024-04-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2024-huegene/"/>
        <id>https://haselkern.com/blog/2024-huegene/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2024-huegene/">&lt;p&gt;I came up with an idea for generating images.&lt;&#x2F;p&gt;
&lt;p&gt;Start by creating an empty image
and placing one or more seed pixels with a color of your choice in it.
Every empty pixel around these pixels is now part of a front that will be expanded outwards. Until the whole image is filled, pick a pixel in the front and fill it with color. All empty pixels around it get added to the front.&lt;&#x2F;p&gt;
&lt;p&gt;This is known as the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Flood_fill&quot;&gt;flood-fill algorithm (Wikipedia)&lt;&#x2F;a&gt; because you flood the image with paint.
There are some helpful visualizations on the Wikipedia page.&lt;&#x2F;p&gt;
&lt;p&gt;Filling an image with a single color is not that interesting,
which is where my idea comes in:
Every pixel remembers its parent and gets filled with a color that differs slightly from its parent&#x27;s color.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-huegene&#x2F;mutation.drawio.png&quot; title=&quot;a diagram showing the spread of color from a seed. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a diagram showing the spread of color from a seed&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;mutation.drawio.68587b68ad6a09c6.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 1124px);
                aspect-ratio: 1124&#x2F;484;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;mutation.drawio.158c464f1a85778b.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This is easy to implement, so here is my first try. I placed a single black pixel in the middle and then filled the whole image.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-huegene&#x2F;deterministic-front.jpg&quot; title=&quot;colorful vertical lines. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;colorful vertical lines&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;deterministic-front.f0b7c50e502f25d9.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 1920px);
                aspect-ratio: 1920&#x2F;1080;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;deterministic-front.88aa49068711253f.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;This looks less dynamic than I had anticipated.
But it can be explained:
I always pick the first pixel in the front to fill next.
This linear strategy results in a linear-looking image.
By picking a random pixel in the front, the image looks much more organic.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-huegene&#x2F;basic.jpg&quot; title=&quot;randomized gradients radiating outward from the center. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;randomized gradients radiating outward from the center&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;basic.5157cb6d48cfd241.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 1920px);
                aspect-ratio: 1920&#x2F;1080;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;basic.55693d22ab55edbb.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;By reducing the strength of changing the color, you can get a smoother image.
For this image, I picked an orange seed and moved it off-center.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-huegene&#x2F;pleasing.png&quot; title=&quot;orange colors radiating from a point to the left side of the image. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;orange colors radiating from a point to the left side of the image&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;pleasing.c4de8d75a82f5373.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 1920px);
                aspect-ratio: 1920&#x2F;1080;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;pleasing.0ea98032a8a439c0.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Here is an image with multiple seeds.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-huegene&#x2F;two-seeds.jpg&quot; title=&quot;blue colors on the left, orange colors on the right, separated by a diagonal line. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;blue colors on the left, orange colors on the right, separated by a diagonal line&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;two-seeds.3182e8b75e465af9.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 1920px);
                aspect-ratio: 1920&#x2F;1080;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;two-seeds.5a6ffe9fa17cb406.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;In all previous images, the front was filled with colors that were changed randomly from each pixel&#x27;s parent.
For the following two images, I made up a new set of rules.&lt;&#x2F;p&gt;
&lt;p&gt;Inside a horizontal strip, the horizon I call it, the color is changed randomly, as before.
For everything above the horizon, the color should gradually change more towards a deep blue.
For everything below the horizon, the color should quickly change to black.&lt;&#x2F;p&gt;
&lt;p&gt;This set of rules works out pretty well.
Combined with a yellow seed on the horizon, this looks like a sunset.
The edge of the horizon is colorful,
making it look like forests and mountains are catching the last rays of the sun.&lt;&#x2F;p&gt;
&lt;p&gt;

&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-huegene&#x2F;sunset.png&quot; title=&quot;a scene that is reminiscent of a sunset. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a scene that is reminiscent of a sunset&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;sunset.21ee740a10ff4485.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 1920px);
                aspect-ratio: 1920&#x2F;1080;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;sunset.e6ebfde47fae7eb7.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;



&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-huegene&#x2F;sunset_big.jpg&quot; title=&quot;another sunset. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;another sunset&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;sunset_big.d3d148dbc10dc685.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 3840px);
                aspect-ratio: 3840&#x2F;2160;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;sunset_big.8fefca299ba8533c.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;p&gt;
&lt;h1 id=&quot;huegene&quot;&gt;Huegene&lt;&#x2F;h1&gt;
&lt;p&gt;The idea of modifying a flood-fill is not new.
Through &lt;em&gt;a lot&lt;&#x2F;em&gt; of searching the web, I was able to find the first mention of a similar algorithm by Dave Ackley,
which is where I got the name &lt;em&gt;Huegene&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;From &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210915185932&#x2F;http:&#x2F;&#x2F;robust.cs.unm.edu&#x2F;doku.php?id=ulam:demos:coevolution&quot;&gt;http:&#x2F;&#x2F;robust.cs.unm.edu&#x2F;doku.php?id=ulam:demos:coevolution (Web Archive)&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In 2002, Dave Ackley developed a coevolution simulation project called Huegene for a C++ programming course.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The model described in the article presents a simulation of plants and herbivores.
The plants behave like the pixels in the algorithm I have shown above,
spreading and changing color.
Additionally, there are herbivores,
which can move around and eat plants that have a similar color to them.
When producing offspring, the child will have a slightly different color from the parent.
The goal of the simulation is to show the herbivores and plants adapting to changing conditions in the biome around them.
You can see it in action in this video by Ackley,
which concludes this post on another colorful note.&lt;&#x2F;p&gt;
&lt;div style=&quot;position: relative; overflow: hidden; width: 100%; padding-top: 56.25%;&quot;&gt;
    &lt;iframe style=&quot;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;&quot; width=&quot;100%&quot;
        height=&quot;100%&quot;
        src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;jQaXtbrVNaU&quot;
        webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Static Site Generators Are Great</title>
        <published>2024-04-19T00:00:00+00:00</published>
        <updated>2024-04-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2024-ssg/"/>
        <id>https://haselkern.com/blog/2024-ssg/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2024-ssg/">&lt;p&gt;A static site generator is a piece of software that takes a bunch of input files and turns them into a static website.
Often these input files consist of some content and a theme for making the content look nice.&lt;&#x2F;p&gt;
&lt;p&gt;A static website is one where the content does not change.
It is static.
Everything you see on this website is just as when I last uploaded it to a server.&lt;&#x2F;p&gt;
&lt;p&gt;This has obvious disadvantages.
I cannot have comments on here or show something like the current number of followers I have on any platform,
without resorting to JavaScript calling third-party resources.&lt;&#x2F;p&gt;
&lt;p&gt;But it also has advantages.
A static website is simple.
After editing my content, I push a button on my computer to preview the website and another one to upload it.
That&#x27;s it.
I&#x27;m currently (April 2024) using &lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&quot;&gt;GitHub Pages&lt;&#x2F;a&gt; which is free to use and really stable.
I can go months without thinking about this website because I know that it won&#x27;t go down or be overrun by hackers.&lt;&#x2F;p&gt;
&lt;p&gt;A static site generator works best for me and can probably work for you too,
if you are not afraid to touch the terminal and fiddle around with theme files.&lt;&#x2F;p&gt;
&lt;p&gt;Now that I have switched the site generator once again,
it might be fun to reflect on the changes this website went through.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-website-journey&quot;&gt;My Website Journey&lt;&#x2F;h2&gt;
&lt;p&gt;I created this personal website in 2016 using a custom generator that was just called &lt;code&gt;build.py&lt;&#x2F;code&gt; at the time.
It was written in Python and very simple.
It would read in a single template HTML file
and fill that with the content of every markdown file it found in the working tree.
It had a special mode for generating an index file
and was able to read JSON frontmatter.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the majestic beauty I built with it:&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2016-12-14.png&quot; title=&quot;a colorful website with big clickable tiles. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a colorful website with big clickable tiles&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2016-12-14.b71c8d6b520bb421.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;1716;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2016-12-14.d2d4c806d0e56acf.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Eventually, I got fed up with this design and at the end of 2016 I implemented a cleaner look:&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2016-12-20.png&quot; title=&quot;a sparse website with a few links and a stylized font. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a sparse website with a few links and a stylized font&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2016-12-20.03d581fe3d42fcc2.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;1548;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2016-12-20.9a616df96432d2d7.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;In July of 2017, I renamed the tool to &lt;code&gt;goliath&lt;&#x2F;code&gt;.
I had big plans with it at the time
and used the chance and motivation to refine the design of my website
over a the course of a few months.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2017-07-09.png&quot; title=&quot;a website with the title on the left side and a few links on the right. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a website with the title on the left side and a few links on the right&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2017-07-09.b9eb2aa1aa2ef599.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;1094;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2017-07-09.7a0e9c38e6ca6384.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2017-10-18.png&quot; title=&quot;the same website, but now with the title at the top. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;the same website, but now with the title at the top&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2017-10-18.b4016f68f9e3ac11.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;1506;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2017-10-18.cc05d6abc49739af.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2017-11-25.png&quot; title=&quot;the same website, but now with a tilted background box. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;the same website, but now with a tilted background box&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2017-11-25.3ab6599a473fae90.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;1506;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2017-11-25.5dac0bdbca7f009b.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Writing your own generator is fun.
But when tinkering with it you barely improve your website.
Instead of writing something or creating a new project,
you spend a lot of time tweaking the generator for your website.
That&#x27;s not a bad thing, but it was not wanted I wanted to keep doing.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s why in March of 2018, I switched to the first &quot;real&quot; static site generator: &lt;a href=&quot;https:&#x2F;&#x2F;getpelican.com&quot;&gt;Pelican&lt;&#x2F;a&gt;.
It seemed simple enough and I was into Python at the time.
I also changed the design a bit.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2018-03-28.png&quot; title=&quot;the same website as before, but now with thinner fonts. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;the same website as before, but now with thinner fonts&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2018-03-28.7905ba7a6d1ab974.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;1421;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2018-03-28.e8a207f1d5b23b82.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;In September of 2018, I switched to &quot;Ivy&quot;.
The package on PyPi has been replaced by a machine-learning library,
which I find interesting.
I don&#x27;t think the design changed much, but I cannot rebuild the website for this state.&lt;&#x2F;p&gt;
&lt;p&gt;In May 2019 I made the switch to &lt;a href=&quot;https:&#x2F;&#x2F;gohugo.io&quot;&gt;Hugo&lt;&#x2F;a&gt;.
Hugo is great.
It is fast, has lots of customization options
and is easy to use thanks to its extensive documentation.&lt;&#x2F;p&gt;
&lt;p&gt;This was also the first time I thought about what I wanted people to do on my website.
In the screenshot, you can see some actions for every project,
with the main action, like opening a website or downloading a file, being highlighted.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2019-11-24.png&quot; title=&quot;a black-and-white website with a few of my projects. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a black-and-white website with a few of my projects&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2019-11-24.a8bd0baded670cfb.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;2682;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2019-11-24.6f3dbb260c3e58c1.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Hugo is pretty great, but it also feels really big.
There are so many different things to do with it, that it feels overwhelming at times.
It can do everything I want, but I was looking for something simpler.&lt;&#x2F;p&gt;
&lt;p&gt;Around this time I was beginning to get interested in Rust
and eventually found &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;,
which is written in Rust.
Being hyper-focused on that language I was eager to get some use out of software written in it.&lt;&#x2F;p&gt;
&lt;p&gt;So in December 2019, a new design was built with Zola.
I kept the idea of the previous design but made it more playful with some images and rounded boxes.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2019-12-22.png&quot; title=&quot;a website with my projects, each project has an image and some actions. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a website with my projects, each project has an image and some actions&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2019-12-22.5ed157cc6782ea5b.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2358px);
                aspect-ratio: 2358&#x2F;2062;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2019-12-22.f8a4a165e204975b.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;In August 2022, I switched back to Hugo. God knows why.&lt;&#x2F;p&gt;
&lt;p&gt;I also made the website much simpler.
It featured a single stream of posts because I wanted to blog more.
It is much easier and more fun to write a few lines about some topic,
than it is to create and maintain a project.
The previous design featured the same few projects for years.
With this design, my projects were still accessible, but content would be the new focus.
It also was the first design to feature a dark mode.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;2024-04-18.png&quot; title=&quot;a simple website showing a post preview, it is split into light and dark mode. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a simple website showing a post preview, it is split into light and dark mode&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2024-04-18.851b3722b7d6b5fe.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2114px);
                aspect-ratio: 2114&#x2F;1084;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;2024-04-18.46b96dce201e8179.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-now&quot;&gt;What now?&lt;&#x2F;h2&gt;
&lt;p&gt;Two years after the last design change, I&#x27;m writing this post
and notice that I have written way less than I imagined I would.
Finding the motivation to write things down is in itself a challenge.
Having a half-baked website theme that does not properly support many parts of markdown did not help.
I can only really blame myself here.
I wanted to make the design my own
and, again, spent more time tinkering with the website itself
than writing about more interesting things.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to switch back to &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&quot;&gt;Zola&lt;&#x2F;a&gt;.
I like the simplicity.
Simplicity is also the main theme of the theme I&#x27;m using,
&lt;a href=&quot;https:&#x2F;&#x2F;zola-bearblog.netlify.app&quot;&gt;Zola ʕ•ᴥ•ʔ Bear Blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2024-ssg&#x2F;zola-bear-preview.png&quot; title=&quot;zola bear blog preview. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;zola bear blog preview&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;zola-bear-preview.b2162ff287f17936.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2880px);
                aspect-ratio: 2880&#x2F;1800;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;zola-bear-preview.dd86825242a4360f.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;It is inspired by a tiny blogging platform I found: &lt;a href=&quot;https:&#x2F;&#x2F;bearblog.dev&quot;&gt;bearblog.dev&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a blogging platform where words matter most.&lt;&#x2F;p&gt;
&lt;p&gt;Shun the bloat of the current web, embrace the bear necessities.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I think that&#x27;s a great mission.
Instead of getting blinded by flashy features,
I just want a place to write down my thoughts.
After all the changes this website went through in the previous years,
I&#x27;m curious as to how long I will like this design.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ludum Dare 53: Cassie The Carrier Pidgeon</title>
        <published>2023-05-03T00:00:00+00:00</published>
        <updated>2023-05-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2023-ld53-cassie-the-carrier-pidgeon/"/>
        <id>https://haselkern.com/blog/2023-ld53-cassie-the-carrier-pidgeon/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2023-ld53-cassie-the-carrier-pidgeon/">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ldjam.com&#x2F;events&#x2F;ludum-dare&#x2F;53&#x2F;cassie-the-carrier-pidgeon&quot;&gt;Download the game from the Ludum Dare website here.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I decided to participate in &lt;a href=&quot;https:&#x2F;&#x2F;ldjam.com&quot;&gt;Ludum Dare&lt;&#x2F;a&gt; this year. Ludum Dare is a biannual game jam, where you create a game catering to a theme that is announced when the jam starts. There are several categories, but I decided to participate in the &quot;compo&quot;, the competition, where you create a game from scratch, by yourself, in 48 hours.&lt;&#x2F;p&gt;
&lt;p&gt;This years theme was &lt;em&gt;delivery&lt;&#x2F;em&gt;. I had some trouble coming up with ideas that felt fun and fit the theme, but after some tinkering I landed on my final idea: A pidgeon that needs to deliver packages in a village. That village is under attack by monsters, so you need to protect yourself with a gun. The more points you score, the more monsters will spawn, forcing you to be careful and also upgrade your weapon.&lt;&#x2F;p&gt;
&lt;p&gt;I can now proudly present: Cassie, the carrier pidgeon. &lt;a href=&quot;https:&#x2F;&#x2F;ldjam.com&#x2F;events&#x2F;ludum-dare&#x2F;53&#x2F;cassie-the-carrier-pidgeon&quot;&gt;Download from Ludum Dare&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2023-ld53-cassie-the-carrier-pidgeon&#x2F;banner.png&quot; title=&quot;a pixel art pidgeon carrying a gattling gun under its wing. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;a pixel art pidgeon carrying a gattling gun under its wing&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;banner.c7558f36e08cdf67.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 960px);
                aspect-ratio: 960&#x2F;300;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;banner.cc9d1f44df55ddde.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Developing a game from scratch in such a small amount of time is challenging. There&#x27;s so many parts needed to make a playable game that you really need to focus on a tiny amount of features to complete it. To give you a rough idea of how I spent my weekend:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I came up with an idea.&lt;&#x2F;li&gt;
&lt;li&gt;I implemented basic character controls and shooting.&lt;&#x2F;li&gt;
&lt;li&gt;I added monsters you can shoot.&lt;&#x2F;li&gt;
&lt;li&gt;I drew placeholder graphics.&lt;&#x2F;li&gt;
&lt;li&gt;I added jobs so you can pick up packages.&lt;&#x2F;li&gt;
&lt;li&gt;I added houses you deliver the packages to.&lt;&#x2F;li&gt;
&lt;li&gt;I randomized house positions because I was too lazy to do proper level design.&lt;&#x2F;li&gt;
&lt;li&gt;I added health you can lose when you&#x27;re attacked.&lt;&#x2F;li&gt;
&lt;li&gt;I added a game over screen.&lt;&#x2F;li&gt;
&lt;li&gt;I added a menu screen.&lt;&#x2F;li&gt;
&lt;li&gt;I tweaked the spawning behavior of monsters.&lt;&#x2F;li&gt;
&lt;li&gt;I added upgradable shooting cooldown.&lt;&#x2F;li&gt;
&lt;li&gt;I fixed weird bugs when switching between menu and game.&lt;&#x2F;li&gt;
&lt;li&gt;I added a system for jobs with varying difficulty.&lt;&#x2F;li&gt;
&lt;li&gt;I added an auto fire upgrade for the gun.&lt;&#x2F;li&gt;
&lt;li&gt;I tweaked the spawning behavior of monsters (again).&lt;&#x2F;li&gt;
&lt;li&gt;I made some background music.&lt;&#x2F;li&gt;
&lt;li&gt;I drew prettier graphics.&lt;&#x2F;li&gt;
&lt;li&gt;I fixed some bugs of the weapon upgrades and the player&#x27;s walking speed.&lt;&#x2F;li&gt;
&lt;li&gt;I added explosion effects and sound effects.&lt;&#x2F;li&gt;
&lt;li&gt;I tweaked the spawning behavior of monsters (&lt;em&gt;again&lt;&#x2F;em&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;And finally I exported the game and tested it a bit more.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s so much stuff! And that does not even include all the fun ideas I had for different weapon types, more enemy types, different maps and so on. I really thought that I could at least implement different bullet types, but that was reduced to being able to upgrade your shooting speed.&lt;&#x2F;p&gt;
&lt;p&gt;Drawing graphics was also interesting, since I&#x27;m not really that great at it. This is what the game looked like while I was still prototyping:&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2023-ld53-cassie-the-carrier-pidgeon&#x2F;dev02.png&quot; title=&quot;crude pixel art with a horrible color palette and very basic characters. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;crude pixel art with a horrible color palette and very basic characters&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;dev02.42ff1d4048605dd8.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2865px);
                aspect-ratio: 2865&#x2F;1607;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;dev02.01994651fbda2ab9.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;All the things are there, but you would probably be a bit more into it if the game looked nice. I turned to &lt;a href=&quot;https:&#x2F;&#x2F;lospec.com&quot;&gt;lospec.com&lt;&#x2F;a&gt;, a great resource for things about pixel art, and decided to go with the &lt;a href=&quot;https:&#x2F;&#x2F;lospec.com&#x2F;palette-list&#x2F;nyx8&quot;&gt;Nyx8&lt;&#x2F;a&gt; color palette to give my game a makeover. Limiting myself to a few colors to choose from does not guarantee that the game will look nice, but reduces the number of artistic crimes I am able to commit. This is the game after I redrew everything:&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2023-ld53-cassie-the-carrier-pidgeon&#x2F;game01.png&quot; title=&quot;still crude pixel art game, but now with consistent muted purple and orange colors. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;still crude pixel art game, but now with consistent muted purple and orange colors&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;game01.45a094b756b8c051.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 2873px);
                aspect-ratio: 2873&#x2F;1621;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;game01.45dc7d707ebb4093.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Doing all the things above in only 48 hours was definitely stressful. I had a lot of fun and now can brag about a new game, but I underestimated how much the limited time influenced the amount of fun I had. The jam felt less like a fun weekend activity and more like an extended work week.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ldjam.com&#x2F;events&#x2F;ludum-dare&#x2F;53&#x2F;cassie-the-carrier-pidgeon&quot;&gt;Download the game from the  Ludum Dare website&lt;&#x2F;a&gt; if you want to try it out and maybe leave a little feedback there if you like.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;A few days after the jam &lt;a href=&quot;https:&#x2F;&#x2F;ldjam.com&#x2F;events&#x2F;ludum-dare&#x2F;53&#x2F;popcorn-odyssey&#x2F;i-made-a-little-art-for-some-of-my-favorite-games-in-this-jam&quot;&gt;0X_VOID_X0 made some awesome fanart&lt;&#x2F;a&gt; of their favorite games which I just had to share. Thank you!&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2023-ld53-cassie-the-carrier-pidgeon&#x2F;fanart.png&quot; title=&quot;characters from several games, including a mean looking Cassie. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;characters from several games, including a mean looking Cassie&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;fanart.7cca633df6614865.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 800px);
                aspect-ratio: 800&#x2F;512;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;fanart.50b3bb8656e977cd.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>API Errors Are Not Protocol Errors</title>
        <published>2022-09-27T00:00:00+00:00</published>
        <updated>2022-09-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2022-protocol-api-errors/"/>
        <id>https://haselkern.com/blog/2022-protocol-api-errors/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2022-protocol-api-errors/">&lt;p&gt;I visit the &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;programming&#x2F;&quot;&gt;programming subreddit&lt;&#x2F;a&gt; from time to time to check for any projects that might be worth looking into, when I stumbled on something interesting. People were making fun of APIs that returned a status code 404 (NOT FOUND) inside the response, while having a HTTP status 200 (OK).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; curlie api.example&#x2F;some&#x2F;resource
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span&gt; 200 OK
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;content-type:&lt;&#x2F;span&gt;&lt;span&gt; application&#x2F;json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;status&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; 404,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(I like using &lt;a href=&quot;https:&#x2F;&#x2F;curlie.io&quot;&gt;curlie&lt;&#x2F;a&gt; because it shows more information out of the box like I would expect curl to work, including some highlighting.)&lt;&#x2F;p&gt;
&lt;p&gt;It was argued that in this case the API should just return HTTP status 404, without any content, because having multiple status codes is just silly. I would disagree, but lets look at an example first. Say I can get details about some product by its ID from an API:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; curlie api.example&#x2F;producs&#x2F;123
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span&gt; 404 Not Found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hm, there seems to be no product with ID 123. Oh wait, I just made a typo, it&#x27;s obviously &lt;code&gt;products&lt;&#x2F;code&gt;, not &lt;code&gt;producs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; curlie api.example&#x2F;products&#x2F;123
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span&gt; 404 Not Found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So, uh, there is no product with ID 123? I think. Or maybe the endpoint does not exist. And that&#x27;s a problem you cannot really solve by cramming results from your API into an HTTP status code, which is why I think that API errors should not be treated as protocol errors.&lt;&#x2F;p&gt;
&lt;p&gt;There are two conceptual layers at play here, the HTTP layer that transports some bytes with metadata from A to B and your application on top that wants to transport structured information using the layer below. Confusing status codes from one layer with those from the other one is a burden for everyone involved. The initial example I gave was actually pretty close to a response I would expect from a nice API server, but using status 404 has no place in application data, were such an HTTP specific code is not relevant. Something like this would probably be more readable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2e3440;color:#d8dee9;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; curlie api.example&#x2F;products&#x2F;123
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;HTTP&#x2F;1.1&lt;&#x2F;span&gt;&lt;span&gt; 200 OK
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;content-type:&lt;&#x2F;span&gt;&lt;span&gt; application&#x2F;json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;error&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;code&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;not_found&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eceff4;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;The requested product could not be found.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;data&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#88c0d0;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; null
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice how the HTTP status code is 200 because transport was okay, but the response contains an application specific error. This is also the approach &lt;a href=&quot;https:&#x2F;&#x2F;graphql.org&quot;&gt;GraphQL&lt;&#x2F;a&gt; has taken, were servers usually only have a single endpoint you can post to. This endpoint always returns HTTP 200 if the server works, with relevant data being encoded in the request and response data.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This post is just my personal opinion, if you like using HTTP status codes in your API that&#x27;s fine! But maybe reading this gave you some things to think about when designing or working with your next API.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The part where he kills you</title>
        <published>2022-07-16T00:00:00+00:00</published>
        <updated>2022-07-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2022-the-part-where-he-kills-you/"/>
        <id>https://haselkern.com/blog/2022-the-part-where-he-kills-you/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2022-the-part-where-he-kills-you/">&lt;p&gt;A 3D animation with a giant robot I made. Watch it here or &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=lhgG_PeIKfk&quot;&gt;on YouTube&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div style=&quot;position: relative; overflow: hidden; width: 100%; padding-top: 56.25%;&quot;&gt;
    &lt;iframe style=&quot;position: absolute; top: 0; left: 0; bottom: 0; right: 0; width: 100%; height: 100%;&quot; width=&quot;100%&quot;
        height=&quot;100%&quot;
        src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;lhgG_PeIKfk&quot;
        webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sprich</title>
        <published>2019-05-09T00:00:00+00:00</published>
        <updated>2019-05-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2019-sprich/"/>
        <id>https://haselkern.com/blog/2019-sprich/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2019-sprich/">&lt;p&gt;Install it from &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;sprich&quot;&gt;PyPi&lt;&#x2F;a&gt;
or check out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haselkern&#x2F;sprich&quot;&gt;the source code on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Sprich (German: &lt;em&gt;speak&lt;&#x2F;em&gt;) is a tool for game developers. It allows you to easily
create complex dialogs for NPCs by compiling a simple, human readable text file
into JSON you can use in your game.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Trash Belt</title>
        <published>2019-02-10T00:00:00+00:00</published>
        <updated>2019-02-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2019-trash-belt/"/>
        <id>https://haselkern.com/blog/2019-trash-belt/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2019-trash-belt/">&lt;p&gt;Fly through space and try not to crash!
A game for Android where your goal is to collect coins
while avoiding space trash.&lt;&#x2F;p&gt;
&lt;p&gt;I used Unity a lot for prototyping smaller games, but always wanted to try &lt;a href=&quot;https:&#x2F;&#x2F;godotengine.org&quot;&gt;Godot&lt;&#x2F;a&gt;.
This game is the result of me playing around with it over the course of a weekend
and adding some more features over time.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Update in 2024:&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.haselkern.android.game.spaceexplore&quot;&gt;original PlayStore page&lt;&#x2F;a&gt; is now offline because I did not have time to maintain it.&lt;&#x2F;p&gt;
&lt;p&gt;I was able to dig up the APK file, so if you are using an Android device you might still be able to install it: &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2019-trash-belt&#x2F;trash-belt.apk&quot;&gt;trash-belt.apk&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also found the header image I used for the store page:&lt;&#x2F;p&gt;


&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2019-trash-belt&#x2F;header.png&quot; title=&quot;header image. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;header image&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;header.86d38de4304602c6.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 1024px);
                aspect-ratio: 1024&#x2F;500;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;header.9a02d56539e6153d.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;And here are some screenshots from the game:&lt;&#x2F;p&gt;
&lt;p&gt;

&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2019-trash-belt&#x2F;screenshot1.jpg&quot; title=&quot;menu. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;menu&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;screenshot1.89894311470feeca.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 333px);
                aspect-ratio: 333&#x2F;592;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;screenshot1.78476d83e2786139.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;



&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2019-trash-belt&#x2F;screenshot2.jpg&quot; title=&quot;in game. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;in game&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;screenshot2.99bec7b3591a9aff.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 333px);
                aspect-ratio: 333&#x2F;592;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;screenshot2.f881b91ece4116f8.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;



&lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2019-trash-belt&#x2F;screenshot3.jpg&quot; title=&quot;game over. click for full resolution image.&quot;&gt;
        &lt;img
            alt=&quot;game over&quot;
            src=&quot;https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;screenshot3.9a2f2a4e2213c9ec.webp&quot;
            loading=&quot;lazy&quot;
            style=&quot;
                width: min(100%, 333px);
                aspect-ratio: 333&#x2F;592;
                background-image: url(https:&amp;#x2F;&amp;#x2F;haselkern.com&amp;#x2F;processed_images&amp;#x2F;screenshot3.89267f541c04e3c0.webp);
                background-size: 100% 100%;
            &quot;
        &gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;p&gt;
&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ubervotebot</title>
        <published>2016-11-01T00:00:00+00:00</published>
        <updated>2016-11-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2016-ubervotebot/"/>
        <id>https://haselkern.com/blog/2016-ubervotebot/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2016-ubervotebot/">&lt;blockquote&gt;
&lt;p&gt;Update in 2024: The bot is no longer working. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haselkern&#x2F;ubervotebot&quot;&gt;The source code is still available on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A Telegram bot to create polls with. Thousands of people love it.&lt;&#x2F;p&gt;
&lt;p&gt;The results can be shown in a number of different ways, see the screenshots for
a preview of how it might look.&lt;&#x2F;p&gt;
&lt;p&gt;Polls will look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;haselkern&#x2F;ubervotebot&#x2F;master&#x2F;screenshots&#x2F;poll.jpg&quot; alt=&quot;inline poll&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And results can look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;haselkern&#x2F;ubervotebot&#x2F;master&#x2F;screenshots&#x2F;result-list.jpg&quot; alt=&quot;result list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;haselkern&#x2F;ubervotebot&#x2F;master&#x2F;screenshots&#x2F;result-names.jpg&quot; alt=&quot;result names&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;haselkern&#x2F;ubervotebot&#x2F;master&#x2F;screenshots&#x2F;result-grid.jpg&quot; alt=&quot;result names&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;haselkern&#x2F;ubervotebot&#x2F;master&#x2F;screenshots&#x2F;result-bars.jpg&quot; alt=&quot;result names&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This project could not have happened without @yukuku&#x27;s bot starter kit, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;yukuku&#x2F;telebot&quot;&gt;go check it out&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;please-note&quot;&gt;Please note&lt;&#x2F;h1&gt;
&lt;p&gt;There is no limit on the amount of polls you can create, but if you create too many, the &lt;em&gt;&#x2F;result&lt;&#x2F;em&gt; command will not work. If that happens, you might want to try to delete an old poll.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Minecraft Armorstand</title>
        <published>2014-08-17T00:00:00+00:00</published>
        <updated>2014-08-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Lars
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://haselkern.com/blog/2014-armorstand/"/>
        <id>https://haselkern.com/blog/2014-armorstand/</id>
        
        <content type="html" xml:base="https://haselkern.com/blog/2014-armorstand/">&lt;p&gt;The armorstand helper allows you to focus on designing an armorstand&#x27;s pose, without messing with any code.&lt;&#x2F;p&gt;
&lt;p&gt;This tool was originally written for Minecraft 1.8, but has been updated since then to support all different versions of Minecraft.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;Minecraft-ArmorStand&#x2F;&quot;&gt;Use it online here&lt;&#x2F;a&gt; or take a look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haselkern&#x2F;Minecraft-ArmorStand&quot;&gt;source code on GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;help&quot;&gt;Help&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;navigation&quot;&gt;Navigation&lt;&#x2F;h2&gt;
&lt;p&gt;The panel on the left shows a preview of what your armorstand will look like, once it&#x27;s in game. You can drag this view around, to look at the armorstand from different angles.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;version&quot;&gt;Version&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2014-armorstand&#x2F;version.png&quot; alt=&quot;select the appropriate version&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are small differences between the different versions of Minecraft, so please select the version you&#x27;re playing in here. Minecraft will display the current version in the launcher and in the bottom left corner of the menu screen. If you have no idea what to select, the default option is probably fine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;options&quot;&gt;Options&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2014-armorstand&#x2F;settings.png&quot; alt=&quot;checkboxes for options&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;These checkboxes control various aspects of your armorstand.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Invisible&lt;&#x2F;em&gt; turns your armorstand invisible.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Invulnerable&lt;&#x2F;em&gt; makes it indestructible. You can remove all armorstands within a five block radius around you with this command: &lt;code&gt;&#x2F;kill @e[r=5,type=armor_stand]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;PersistenceRequired&lt;&#x2F;em&gt; is a technical attribute. If you don&#x27;t know what it means, you don&#x27;t need this.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;No Base Plate&lt;&#x2F;em&gt; hides the stone plate the armorstand is standing on.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;No Gravity&lt;&#x2F;em&gt; makes the armorstand float in the air.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Show Arms&lt;&#x2F;em&gt; enables the arms and allows you to modify them.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Small&lt;&#x2F;em&gt; makes the armorstand small.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pose&quot;&gt;Pose&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2014-armorstand&#x2F;sliders.png&quot; alt=&quot;sliders to control the pose&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;These sliders control the pose of the armorstand. Play around with them and see what happens!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;equipment&quot;&gt;Equipment&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2014-armorstand&#x2F;equipment.png&quot; alt=&quot;textfield for different types of armor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Use these fields to give the armorstand some equipment. The inputs for boots, leggings, chestplate and helmet have dropdowns to help you select an item. If you want to show a different item, you need to find its name by hovering over an item in Minecraft with the advanced information enabled. You can enable the advanced display within Minecraft by pressing &lt;kbd&gt;F3&lt;&#x2F;kbd&gt;+&lt;kbd&gt;H&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Give Code&lt;&#x2F;em&gt; is a special mode. If you click on the banner to minecraft-heads.com, you can select any head you like to place on your armorstand. If you want to place &lt;a href=&quot;https:&#x2F;&#x2F;minecraft-heads.com&#x2F;custom&#x2F;heads&#x2F;humanoid&#x2F;15397-kirby&quot;&gt;kirby&#x27;s&lt;&#x2F;a&gt; head on your armorstand, click &lt;em&gt;copy&lt;&#x2F;em&gt; right to the code labeled &lt;em&gt;Give-Code&lt;&#x2F;em&gt; and paste that into the helmet field in the armorstand generator.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-name&quot;&gt;Custom Name&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2014-armorstand&#x2F;custom-name.png&quot; alt=&quot;textfield for a custom name&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can give the armorstand a custom name. Check the box to make the name appear over the armorstand.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;slot-interaction&quot;&gt;Slot Interaction&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2014-armorstand&#x2F;lock-slots.png&quot; alt=&quot;checkboxes for locking slots&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a slightly more advanced feature. You can lock certain types of interactions with the armorstand here. For example: If you check the box &lt;em&gt;remove helmet&lt;&#x2F;em&gt; a player can place a helmet on the armorstand, he can replace the helmet with another one, but he will not be able to remove it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;generated-code&quot;&gt;Generated Code&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;haselkern.com&#x2F;blog&#x2F;2014-armorstand&#x2F;generated-code.png&quot; alt=&quot;the generated code&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once you are finished setting everything up, press the button &lt;em&gt;click to copy&lt;&#x2F;em&gt; to copy the code. Jump into a Minecraft world and press &lt;kbd&gt;T&lt;&#x2F;kbd&gt; to open the chat, and then press &lt;kbd&gt;CTRL&lt;&#x2F;kbd&gt;+&lt;kbd&gt;V&lt;&#x2F;kbd&gt; to paste the command. When you press &lt;kbd&gt;ENTER&lt;&#x2F;kbd&gt; the armorstand will appear where you are standing.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
